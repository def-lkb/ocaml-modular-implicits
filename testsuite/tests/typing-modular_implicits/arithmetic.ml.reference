
#                                                                                         type z = Z
type 'n s = S of 'n
module type N = sig type n val n : n end
implicit module Z : sig type n = z val n : n end
implicit module S : functor {N : N} -> sig type n = N.n s val n : n end
module type ADD = sig type a and b and c val a : a val b : b val c : c end
val add : {Add : ADD} -> Add.a -> Add.b -> Add.c = <fun>
implicit module AddZ :
  functor {B : N} ->
    sig type a = z and b = B.n and c = B.n val a : a val b : b val c : c end
implicit module AddS :
  functor
    {A : N} {B : N} {Add : sig
                             type a = A.n
                             and b = B.n
                             and c
                             val a : a
                             val b : b
                             val c : c
                           end} ->
    sig
      type a = A.n s
      and b = B.n
      and c = Add.c s
      val a : a
      val b : b
      val c : c
    end
#   *     - : AddS{Z}{Z}{AddZ{Z}}.c = S Z
# 
